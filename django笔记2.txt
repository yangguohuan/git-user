聚合查询

聚合查询是指对一个数据表中的一个字段的数据进行部分或全部进行统计查询，查bookstore_book数据表中的全部书的平均价格，查询所有书的总个数等，都要使用聚合查询。

聚合查询分为：

表聚合
分组聚合



聚合查询 - 整表聚合

不带分组的聚合查询是指导将全部数据进行集中统计查询。

聚合函数[需要导入]：
- 导入方法: from django.db.models import *
- 合函数: Sum, Avg, Count, Max, Min

语法: MyModel.objects.aggregate(结果变量名=聚合函数('列'))

- 返回结果: 结果变量名和值组成的字典
  格式为: {"结果变量名": }




### 聚合查询 - 分组聚合

分组聚合是指通过计算查询结果中每一个对象所关联的对象集合，从而得出总计值（也可以是平均值或总和），即为查询集的每一项生成聚合。

**语法：**
```python
QuerySet.annotate(结果变量名=聚合函数('列'))
```

**返回值：**
- `QuerySet`









原生数据库操作

Django也可以支持直接用SQL语句的方式通信数据库。

查询：使用MyModel.objects.raw()进行数据库查询操作查询。

语法：MyModel.objects.raw(sql语句, 接参数)

返回值：RawQuerySet集合对象【只支持基础操作，比如循环】

```python
books = models.Book.objects.raw('select * from bookstore_book')
for book in books:
    print(book)
```











原生数据库操作 - SQL注入

使用原生语句时小心 SQL注入

定义：用户通过数据上传，将恶意的SQL语句提交给服务器，从而达到攻击效果。

案例1：用户在搜索好友的表单框里输入 '1 or 1=1'

```python
s1 = Book.objects.raw('select * from bookstore_book where id=%s', ('1 or 1=1'))
```

攻击结果：可查询出所有用户数据







原生数据库操作 - cursor

完全跨过模型类操作数据库 - 查询/更新/删除

1. 导入cursor所在的包
   ```python
   from django.db import connection
   ```

2. 用创建cursor类的构造函数创建cursor对象，再使用cursor对象。为保证在出现异常时能释放cursor资源，通常使用with语句进行创建操作。
   ```python
   from django.db import connection
   with connection.cursor() as cur:
       cur.execute('执行SQL语句', '拼接参数')
   ```









提取文字如下：

```
# 用SQL语句将id为10的书的出版社改为"XXX出版社"
from django.db import connection
with connection.cursor() as cur:
    cur.execute('update bookstore_book set pub_house="XXX出版社" where id=10;')

with connection.cursor() as cur:
    # 删除id为1的一条记录
    cur.execute('delete from bookstore_book where id=10;')
```




