在项目同名文件夹下新建 views.py

1.  views.py先导入 from django.http import HttpResponse

2. from django.shortcuts import render  (直接用)

命名规范 def xxx_view(request): 

路由配置 - path
· path()函数
· 导入 - from django. urls import path
· 语法-path(route, views, name= None)
· 参数:
1. route：字符串类型，匹配的请求路径
2. views：指定路径所对应的视图处理函数的名称 ✗
3. name：为地址起别名，在模板中地址反向解析时使用

路由配置 -path -转换器
· path转换器
· 语法：<转换器类型：自定义名>
· 作用：若转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数
· 例子: path(' page/< int: page>', views. xxx)
str、 int、 slug( 类似  this-is-django ) 、     path （比如 etc/sdg/dfd）


re_path() 函数，要提前导入
在url的匹配过程中可以使用正则表达式进行精确匹配，语法re_path(reg, view, name=xxx)
正则表达式为命名分组模式（?P<name>pattern）；匹配提取参数后用关键字传参方式传递给视图函数
re_path(r'^str(?P<name>pattern)/(?P<name>pattern)/(?P<name>pattern)$')








# Django中的请求（续）

- path_info: URL字符串
- method: 字符串，表示HTTP请求方法，常用值：'GET'、'POST'
- GET: QueryDict查询字典的对象，包含get请求方式的所有数据
- POST: QueryDict查询字典的对象，包含post请求方式的所有数据
- FILES: 类似于字典的对象，包含所有的上传文件信息








# Django中的请求（续1）

- COOKIES：Python字典，包含所有的cookie，键和值都为字符串
- session：类似于字典的对象，表示当前的会话
- body：字符串，请求体的内容(POST或PUT)
- scheme：请求协议('http://'https')
- request.get_full_path()：请求的完整路径
- request.META：请求中的元数据(消息头)
  - request.META['REMOTE_ADDR']：客户端IP地址
















1. **HTTP响应状态行**:
   - `HTTP/1.0 200 OK`：表示HTTP协议的版本是1.0，状态码是200，表示请求成功。

2. **响应头**:
   - `Date: Sat, 21 Mar 2020 09:44:15 GMT`：响应生成的日期和时间。
   - `Server: WSGIServer/0.2 cpython/3.6.8`：服务器信息，使用的是WSGIServer，Python版本是3.6.8。
   - `Content-Type: application/json`：响应内容的类型是JSON格式。
   - `X-Frame-Options: SAMEORIGIN`：防止页面被嵌入到其他站点的框架中。
   - `Content-Length: 217`：响应内容的长度是217字节。
   - `Vary: Origin`：表示响应可能会根据请求的来源而变化。
   - `Access-Control-Allow-Origin: *`：允许所有域名的请求访问该资源。

3. **响应体**:
   - `["code": 200, "username": "guoxiaonao"]`：这是响应的主体内容，表示返回了一个JSON对象，其中包含状态码200和用户名"guoxiaonao"。

这个样例展示了一个典型的HTTP响应，包含了状态行、响应头和响应体。

# 响应样例

HTTP/1.0 200 OK  
Date: Sat, 21 Mar 2020 09:44:15 GMT  
Server: WSGIServer/0.2 cpython/3.6.8  
Content-Type: application/json  
X-Frame-Options: SAMEORIGIN  
Content-Length: 217  
Vary: Origin  
Access-Control-Allow-Origin: *  

["code": 200, "username": "guoxiaonao"] -> body  

---

## 起始行
-> headers













# Django中的响应对象

构造函数格式：

HttpResponse(content=响应体, content_type=响应体数据类型, status=状态码)

作用：

向客户端浏览器返回响应，同时携带响应体内容









django 设计模式 MTV


# 模板配置

创建模板文件夹 <项目名>/templates

在 settings.py 中 TEMPLATES 配置项

1. BACKEND：指定模板的引擎  
2. DIR$：模板的搜索目录(可以是一个或多个)  
3. APP_DIRS：是否要在应用中的 templates 文件夹中搜索模板文件  
4. OPTIONS：有关模板的选项  

- **配置项中** 需要修改部分  
  设置DIR$ - 'DIR$': [os.path.join(BASE_DIR, 'templates')],







from django.shortcuts import render   

return render(request, 'xxx.html', dic) dic必须是字典  

模板中 {{变量名}} 调用视图传进来的变量




 **模板过滤器**:
   - **定义**: 在变量输出时对变量的值进行处理。
   - **作用**: 可以通过使用过滤器来改变变量的输出显示。
   - **语法**: `[变量 | 过滤器1: 参数值1 | 过滤器2: 参数值2' .]`    safe 内容安全 不转义
   - **官方文档**: [Django模板过滤器文档](https://docs.djangoproject.com/en/2.2/ref/templates/builtins/)



模板的继承，{% extends 'PATH' %}


url 反向解析  path(route, views, name="别名")

view中的反向解析 from django.urls improt reverse 
reverse('别名', args=[], kwargs={})

访问静态路径
{% load static %}
{% static '路径' %}




# 应用下的模板

应用内部可以配置模板目录

1. 应用下手动创建 **templates** 文件夹  
2. settings.py中 开启 应用模板功能  
   ✓ TEMPLATE 配置项中的 'APP_DIRS' 值为 True 即可  

应用下 **templates** 和 外层 **templates** 都存在时，django得查找模板规则  

1. 优先查找外层 **templates** 目录下的模板  
2. 按 **INSTALLED_APPS** 配置下的 应用顺序 逐层查找    嵌套文件夹重名文件





# Django配置mysql

- 安装 mysqlclient [版本 mysqlclient 1.3.13以上，官网目前为1.4.x]
- 安装前确认ubuntu是否已安装 python3-dev 和 default-libmysqlclient-dev
  1. sudo apt list --installed|grep -E 'libmysqlclient-dev|python3-dev'
  2. 若命令无输出则需要安装 - sudo apt-get install python3-dev default-libmysqlclient-dev

sudo pip3 freeze|grep -i 'mysql' 检查当前环境下mysql 安装了哪些库












# Django配置mysql（续）

- 创建数据库
- 进入mysql数据库 执行  
  ✓ create database 数据库名 default charset utf8  
  ✓ 通常数据库名跟项目名保持一致  

- settings.py里进行数据库的配置  
  ✓ 修改DATABASES配置项的内容，由sqlite3变为mysql



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

改成：
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mysite3',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306'
    }
}







ORM框架

定义：ORM（Object Relational Mapping）即对象关系映射，它是一种程序技术，它允许你使用类和对象对数据库进行操作，从而避免通过SQL语句操作数据库。

作用：
1. 建立模型类和表之间的对应关系，允许我们通过面向对象的方式来操作数据库。
2. 根据设计的模型类生成数据库中的表格。
3. 通过简单的配置就可以进行数据库的切换。


ORM框架（续）

优点：
- 只需要面向对象编程，不需要面向数据库编写代码。
   对数据库的操作都转化成对类属性和方法的操作。
   不用编写各种数据库的SQL语句。

- 实现了数据模型与数据库的解耦，屏蔽了不同数据库操作上的差异。
  √ 不在关注用的是mysql、oracle...等数据库的内部细节。
  √ 通过简单的配置就可以轻松更换数据库，而不需要修改代码。

缺点
√ 对于复杂业务，使用成本较高
√ 根据对象的操作转换成SQL语句，根据查询的结果转化成对象，在映射过程中有性能损失。






3.数据库迁移
- 移是Django同步您对模型所做更改（添加字段，删除模型等）到您的数据库模式的方式

√ 生成迁移文件 - 执行 python3 manage.py makemigrations
  应用下的models.py文件生成一个中间文件，并保存在migrations文件夹中

√ 执行迁移脚本程序 - 行 python3 manage.py migrate
  执行迁移程序实现迁移。将每个应用下的migrations目录中的中间文件同步回数据库




模型类 - 字段类型 

BooleanField()
数据库类型: tinyint(1)
编程语言中: 使用True或False来表示值
在数据库中: 使用1或0来表示具体的值
CharField()
数据库类型: varchar
注意: 必须要指定max_length参数值






DateField()
数据库类型：date
作用：表示日期
参数：
auto_now：每次保存对象时，自动设置该字段为当前时间（取值：True/False）。
auto_now_add：当对象第一次被创建时自动设置当前时间（取值：True/False）。
default：设置当前时间（取值：字符串格式时间如：'2019-6-1'）。
以上三个参数只能多选一。





DateTimeField()
数据库类型: datetime(6)
作用: 示日期和时间
参数同DateField
FloatField()
数据库类型: double
编程语言中和数据库中都使用小数表示值





DecimalField()
数据库类型: decimal(x, y)
编程语言中: 使用小数表示该列的值
在数据库中: 使用小数
参数:
max_digits: 位数总数，包括小数点后的位数。该值必须大于等于 decimal_places.
decimal_places: 小数点后的数字数量





EmailField()
数据库类型: varchar
编程语言和数据库中使用字符串
IntegerField()
数据库类型: int
程语言和数据库中使用整数








ImageField()
数据库类型: varchar(100)
作用: 在数据库中为了保存图片的路径
编程语言和数据库中使用字符串
TextField()
数据库类型: longtext
作用: 表示不定长的字符数据


https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-types








from django.db import models

class 模型类名(models.Model):
    字段名 = models.字段类型(字段选项)











模型类 - 字段选项
字段选项：指定创建的列的额外的信息。
许出现多个字段选项，多个选项之间使用逗号隔开。
primary_key
如果设置为 True，表示该列为主键。如果指定一个字段为主键，则此数据库表不会创建 id 字段。
blank
设置为 True 时，字段可以为空。设置为 False 时，字段是必须填写的。









null
如果设置为 True，表示该列值允许为空。
默认为 False，如果此选项为 False 建议加入 default 选项来设置默认值。
default
设置所在列的默认值，如果字段选项 null=False 建议添加此项。






基本操作包括增删改查操作，即(CRUD操作)

CRUD是指在做计算处理时的增加(Create)、读取查询(Read)、更新(Update)和删除(Delete)

ORM CRUD 核心 -> 模型类.管理器对象







每个继承自 models.Model 的模型类，都会有一个 objects 对象被同样继承下来。这个对象叫管理器对象。

数据库的增删改查可以通过模型的管理器实现。

class MyModel(models.Model):
    ...

MyModel.objects.create(...)  # objects 是管理器对象








创建 MyModel 实例对象，并调用 save() 行保存
obj = MyModel(属性=值, 属性=值)
obj.属性=值
obj.save()




在Django提供了一个交互式的操作项目叫Django Shell，它能够在交互模式用项目工程的代码执行相应的操作。

利用 Django Shell 以代替编写view的代码来进行直接操作。

注意：项目代码发生变化时，重新进入Django shell。

启动方式：

python3 manage.py shell



all(), values(), values_list()







• order_by()

用法: MyModel.objects.order_by('-列', '列')

作用:
与 all() 方法不同，它会用 SQL 语句的 ORDER BY 子句对查询结果进行根据某个字段选择性的进行排序

说明:
默认是按照升序排序，降序排序则需要在列前增加 '-' 示








filter(条件)

语法: MyModel.objects.filter(属性1=值1, 属性2=值2)

作用: 返回包含此条件的全部的数据集

返回值:
QuerySet容器对象，内部存放MyModel实例

说明:
当多个属性在一起时为“与”关系，即当


filter样例

# 查询书中出版社为"清华大学出版社"的图书
from bookstore.models import Book
books = Book.objects.filter(pub="清华大学出版社")
for book in books:
    print("书名:", book.title)

# 查询Author实体中name为王老师并且age是28岁的
authors = Author.objects.filter(name='王老师', age=28)






exclude(条件)

语法: MyModel.objects.exclude(条件)

作用: 返回不包含此条件的全部的数据集

示例:
查询清华大学出版社，定价等于50以外的全部图书

```python
books = models.Book.objects.exclude(pub="清华大学出版社", price=50)
for book in books:
    print(book)
```








get(条件)

语法: MyModel.objects.get(条件)

作用: 返回满足条件的唯一一条数据

说明: 该方法只能返回一条数据
- 查询结果多余一条数据则抛出 Model.MultipleObjectsReturned 异常
- 查询结果如果没有数据则抛出 Model.DoesNotExist 异常







查询谓词    双下划线

定义：做更灵活的条件查询时需要使用查询谓词

说明：每一个查询谓词是一个独立的查询功能

- exact：等值匹配

示例：
```python
Author.objects.filter(id__exact=1)
# 同于 select * from author where id = 1
```







查询谓词

定义：做更灵活的条件查询时需要使用查询谓词

说明：每一个查询谓词是一个独立的查询功能

- _exact：等值匹配
  示例：
  ```python
  Author.objects.filter(id__exact=1)
  # 同于 select * from author where id = 1
  ```

- _contains：包含指定值
  示例：
  ```python
  Author.objects.filter(name__contains='w')
  # 等同于 select * from author where name like '%w%'
  ```

- _startswith：以 XXX 开始

- _endswith：以 XXX 结束







_gt：大于指定值

样例：Author.objects.filter(age__gt=50)
# 等同于 select * from author where age > 50

_gte：大于等于

_lt：小于

_lte：小于等于






查询谓词（续2）

_in：查找数据是否在指定范围内
样例：
```python
Author.objects.filter(country__in=['中国', '日本', '韩国'])
```
# 等同于 select * from author where country in ('中国', '日本', '韩国')

_range：查找数据是否在指定的区间范围内
样例：
```python
# 查找年龄在某一区间内的所有作者
Author.objects.filter(age__range=(35, 50))
```
# 同于 SELECT ... WHERE Author BETWEEN 35 and 50;







修改单个实体的某些字段值的步骤：

1. 查
   - 通过 `get()` 到要修改的实体对象

2. 改
   - 通过 `对象.属性` 的方式修改数据

3. 保存
   - 通过 `对象.save()` 保存数据










直接调用QuerySet的update(属性=值) 实现批量修改

示例：
```python
# 将 id 大于 3 的所有图书价格定为 0 元
books = Book.objects.filter(id__gt=3)
books.update(price=0)

# 将所有书的零售价定为 100 
books = Book.objects.all()
books.update(market_price=100)
```


批量删除 步骤

1. 查找查询结果集中满足条件的全部QuerySet查询集合对象
2. 用查询集合对象的delete()方法实现删除

# 删除全部作者中，年龄大于65的全部信息
```python
auths = Author.objects.filter(age__gt=65)
auths.delete()
```



伪删除

- 通常不会轻易在业务里把数据真正删掉，取而代之的是做伪删除，即在表中添加一个布尔型字段(is_active)，默认是True；执行删除时，将欲删除数据的is_active字段置为False。
- 注意：用伪删除时，确保显示数据的地方，均加了 is_active=True 的过滤查询。






F对象

- 一个F对象代表数据库中某条记录的字段的信息
- 作用：
  - 通常是对数据库中的字段值在不获取的情况下进行操作
  - 用于类属性(字段)之间的比较。
- 语法
  ```python
  from django.db.models import F
  F('列名')
  ```





Q对象

当在获取查询结果集使用复杂的逻辑或、逻辑非 ~ 操作时可以借助于 Q对象进行操作

如：想找出定价低于20元或清华大学出版社的全部书，可以写成

```python
Book.objects.filter(Q(price__lt=20) | Q(pub="清华大学出版社"))
```

Q对象在数据包 django.db.models 中。需要先导入再使用






作用 在条件中用来实现除 and(&) 以外的 or(|) 或 not(~) 操作

运算符:
- & 与操作
- | 或操作
- ~ 非操作

语法:
```python
from django.db.models import Q

Q(条件1) | Q(条件2)  # 条件1成立或条件2成立
Q(条件1) & Q(条件2)  # 条件1和条件2同时成立
Q(条件1) & ~Q(条件2)  # 条件1成立且条件2不成立
```









